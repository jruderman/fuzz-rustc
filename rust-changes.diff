diff --git a/compiler/rustc_attr/src/builtin.rs b/compiler/rustc_attr/src/builtin.rs
index 753f62dd589..278698378d0 100644
--- a/compiler/rustc_attr/src/builtin.rs
+++ b/compiler/rustc_attr/src/builtin.rs
@@ -679,7 +679,17 @@ pub fn eval_condition(
                 sess.emit_warning(session_diagnostics::UnknownVersionLiteral { span: *span });
                 return false;
             };
-            let rustc_version = parse_version(env!("CFG_RELEASE"), true).unwrap();
+            let rustc_version = match parse_version(env!("CFG_RELEASE"), true) {
+                Some(v) => v,
+                None => {
+                    // For fuzzing:
+                    // I don't know what this code is trying to do,
+                    // or whether run-fuzzer.sh set up the env vars wrong,
+                    // but for now let's just read another env var so we don't crash on the test
+                    // rust/src/test/ui/feature-gates/feature-gate-cfg-version.rs
+                    parse_version(env!("CFG_VERSION"), true).unwrap()
+                }
+            };
 
             // See https://github.com/rust-lang/rust/issues/64796#issuecomment-640851454 for details
             if sess.assume_incomplete_release {
diff --git a/compiler/rustc_driver/Cargo.toml b/compiler/rustc_driver/Cargo.toml
index 59e93777748..705dda36dc2 100644
--- a/compiler/rustc_driver/Cargo.toml
+++ b/compiler/rustc_driver/Cargo.toml
@@ -4,7 +4,7 @@ version = "0.0.0"
 edition = "2021"
 
 [lib]
-crate-type = ["dylib"]
+#crate-type = ["dylib"]
 
 [dependencies]
 tracing = { version = "0.1.35" }
diff --git a/compiler/rustc_errors/src/diagnostic.rs b/compiler/rustc_errors/src/diagnostic.rs
index 375e3ebd77d..7add5173259 100644
--- a/compiler/rustc_errors/src/diagnostic.rs
+++ b/compiler/rustc_errors/src/diagnostic.rs
@@ -621,10 +621,11 @@ pub fn multipart_suggestion_with_style(
         style: SuggestionStyle,
     ) -> &mut Self {
         assert!(!suggestion.is_empty());
-        debug_assert!(
-            !(suggestion.iter().any(|(sp, text)| sp.is_empty() && text.is_empty())),
-            "Span must not be empty and have no suggestion"
-        );
+        // Commented out for fuzzing until https://github.com/rust-lang/rust/issues/103497 is fixed
+        //debug_assert!(
+        //    !(suggestion.iter().any(|(sp, text)| sp.is_empty() && text.is_empty())),
+        //    "Span must not be empty and have no suggestion"
+        //);
 
         self.push_suggestion(CodeSuggestion {
             substitutions: vec![Substitution {
@@ -703,10 +704,11 @@ pub fn span_suggestion_with_style(
         applicability: Applicability,
         style: SuggestionStyle,
     ) -> &mut Self {
-        debug_assert!(
-            !(sp.is_empty() && suggestion.to_string().is_empty()),
-            "Span must not be empty and have no suggestion"
-        );
+        // Commented out for fuzzing until https://github.com/rust-lang/rust/issues/103497 is fixed
+        //debug_assert!(
+        //    !(sp.is_empty() && suggestion.to_string().is_empty()),
+        //    "Span must not be empty and have no suggestion"
+        //);
         self.push_suggestion(CodeSuggestion {
             substitutions: vec![Substitution {
                 parts: vec![SubstitutionPart { snippet: suggestion.to_string(), span: sp }],
@@ -766,10 +768,11 @@ pub fn span_suggestions_with_style(
         let mut suggestions: Vec<_> = suggestions.into_iter().collect();
         suggestions.sort();
 
-        debug_assert!(
-            !(sp.is_empty() && suggestions.iter().any(|suggestion| suggestion.is_empty())),
-            "Span must not be empty and have no suggestion"
-        );
+        // Commented out for fuzzing until https://github.com/rust-lang/rust/issues/103497 is fixed
+        //debug_assert!(
+        //    !(sp.is_empty() && suggestions.iter().any(|suggestion| suggestion.is_empty())),
+        //    "Span must not be empty and have no suggestion"
+        //);
 
         let substitutions = suggestions
             .into_iter()
@@ -794,13 +797,14 @@ pub fn multipart_suggestions(
         applicability: Applicability,
     ) -> &mut Self {
         let suggestions: Vec<_> = suggestions.into_iter().collect();
-        debug_assert!(
-            !(suggestions
-                .iter()
-                .flat_map(|suggs| suggs)
-                .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),
-            "Span must not be empty and have no suggestion"
-        );
+        // Commented out for fuzzing until https://github.com/rust-lang/rust/issues/103497 is fixed
+        //debug_assert!(
+        //    !(suggestions
+        //        .iter()
+        //        .flat_map(|suggs| suggs)
+        //        .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),
+        //    "Span must not be empty and have no suggestion"
+        //);
 
         self.push_suggestion(CodeSuggestion {
             substitutions: suggestions
diff --git a/compiler/rustc_errors/src/styled_buffer.rs b/compiler/rustc_errors/src/styled_buffer.rs
index 9abdb5fc97c..9814c688052 100644
--- a/compiler/rustc_errors/src/styled_buffer.rs
+++ b/compiler/rustc_errors/src/styled_buffer.rs
@@ -29,7 +29,8 @@ pub fn new() -> StyledBuffer {
     /// Returns content of `StyledBuffer` split by lines and line styles
     pub fn render(&self) -> Vec<Vec<StyledString>> {
         // Tabs are assumed to have been replaced by spaces in calling code.
-        debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\t')));
+        // Commented out for fuzzing until https://github.com/rust-lang/rust/issues/81614 is fixed
+        // debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\t')));
 
         let mut output: Vec<Vec<StyledString>> = vec![];
         let mut styled_vec: Vec<StyledString> = vec![];
diff --git a/compiler/rustc_interface/src/util.rs b/compiler/rustc_interface/src/util.rs
index 2fe3fb2fa56..2871815d081 100644
--- a/compiler/rustc_interface/src/util.rs
+++ b/compiler/rustc_interface/src/util.rs
@@ -37,7 +37,7 @@ pub fn add_configuration(
     cfg: &mut CrateConfig,
     sess: &mut Session,
     codegen_backend: &dyn CodegenBackend,
-) {
+) {/* commented out for fuzzing because this leaks memory
     let tf = sym::target_feature;
 
     let unstable_target_features = codegen_backend.target_features(sess, true);
@@ -50,7 +50,7 @@ pub fn add_configuration(
 
     if sess.crt_static(None) {
         cfg.insert((tf, Some(sym::crt_dash_static)));
-    }
+    } */
 }
 
 pub fn create_session(
diff --git a/compiler/rustc_middle/src/middle/privacy.rs b/compiler/rustc_middle/src/middle/privacy.rs
index 3a91522d362..0fd5443fa0e 100644
--- a/compiler/rustc_middle/src/middle/privacy.rs
+++ b/compiler/rustc_middle/src/middle/privacy.rs
@@ -158,7 +158,8 @@ pub fn set_public_at_level(
     }
 
     pub fn check_invariants(&self, tcx: TyCtxt<'_>, early: bool) {
-        if !cfg!(debug_assertions) {
+        // Disabled for fuzzing: https://github.com/rust-lang/rust/issues/104249
+        if true || !cfg!(debug_assertions) {
             return;
         }
         for (&def_id, ev) in &self.map {
