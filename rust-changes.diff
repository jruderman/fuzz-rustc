diff --git a/compiler/rustc_driver/Cargo.toml b/compiler/rustc_driver/Cargo.tomlindex 59e93777748..705dda36dc2 100644
--- a/compiler/rustc_driver/Cargo.toml
+++ b/compiler/rustc_driver/Cargo.toml
@@ -4,7 +4,7 @@ version = "0.0.0"
 edition = "2021"

 [lib]
-crate-type = ["dylib"]
+#crate-type = ["dylib"]

 [dependencies]
 tracing = { version = "0.1.35" }
diff --git a/compiler/rustc_errors/src/styled_buffer.rs b/compiler/rustc_errors/src/styled_buffer.rs
index 9abdb5fc97c..9814c688052 100644
--- a/compiler/rustc_errors/src/styled_buffer.rs
+++ b/compiler/rustc_errors/src/styled_buffer.rs
@@ -29,7 +29,8 @@ pub fn new() -> StyledBuffer {
     /// Returns content of `StyledBuffer` split by lines and line styles
     pub fn render(&self) -> Vec<Vec<StyledString>> {
         // Tabs are assumed to have been replaced by spaces in calling code.
-        debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\t')));
+        // Commented out for fuzzing until https://github.com/rust-lang/rust/issues/81614 is fixed
+        // debug_assert!(self.lines.iter().all(|r| !r.iter().any(|sc| sc.chr == '\t')));

         let mut output: Vec<Vec<StyledString>> = vec![];
         let mut styled_vec: Vec<StyledString> = vec![];
diff --git a/compiler/rustc_interface/src/util.rs b/compiler/rustc_interface/src/util.rs
index f7e70d355cf..25505af71ae 100644
--- a/compiler/rustc_interface/src/util.rs
+++ b/compiler/rustc_interface/src/util.rs
@@ -45,7 +45,7 @@ pub fn add_configuration(
     cfg: &mut CrateConfig,
     sess: &mut Session,
     codegen_backend: &dyn CodegenBackend,
-) {
+) {/* commented out for fuzzing because this leaks memory
     let tf = sym::target_feature;

     let unstable_target_features = codegen_backend.target_features(sess, true);
@@ -58,7 +58,7 @@ pub fn add_configuration(

     if sess.crt_static(None) {
         cfg.insert((tf, Some(sym::crt_dash_static)));
-    }
+    } */
 }

 pub fn create_session(
